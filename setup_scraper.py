#!/usr/bin/env python3
"""
Script de configura√ß√£o e instala√ß√£o para o Archive.org PF Scraper
"""

import os
import sys
import subprocess
import importlib

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou superior √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    requirements = [
        "requests>=2.31.0",
        "beautifulsoup4>=4.12.2", 
        "pandas>=2.0.3",
        "tqdm>=4.66.1",
        "urllib3>=2.0.4",
        "lxml>=4.9.3"
    ]
    
    print("üì¶ Instalando depend√™ncias...")
    
    for requirement in requirements:
        try:
            print(f"  Instalando {requirement}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", requirement
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"  ‚úÖ {requirement} instalado com sucesso")
        except subprocess.CalledProcessError:
            print(f"  ‚ùå Erro ao instalar {requirement}")
            return False
    
    return True

def verify_installation():
    """Verifica se todas as bibliotecas foram instaladas corretamente"""
    modules = {
        'requests': 'Biblioteca para requisi√ß√µes HTTP',
        'bs4': 'BeautifulSoup para parsing HTML',
        'pandas': 'Pandas para manipula√ß√£o de dados',
        'tqdm': 'Barra de progresso',
        'urllib3': 'Utilit√°rios para URLs'
    }
    
    print("\nüîç Verificando instala√ß√£o...")
    
    for module, description in modules.items():
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}: {description}")
        except ImportError:
            print(f"  ‚ùå {module}: {description} - N√ÉO INSTALADO")
            return False
    
    return True

def create_sample_config():
    """Cria arquivo de configura√ß√£o de exemplo"""
    config_content = """# Configura√ß√µes do Archive.org PF Scraper

# Diret√≥rio onde os arquivos ser√£o salvos
OUTPUT_DIR = "documentos_pf"

# N√∫mero m√°ximo de downloads simult√¢neos
MAX_WORKERS = 5

# Delay entre requisi√ß√µes (segundos)
RATE_LIMIT_DELAY = 1.0

# Dom√≠nios a serem pesquisados
SEARCH_DOMAINS = [
    "cebraspe.org.br",
    "cespe.unb.br"
]

# Palavras-chave para busca
KEYWORDS = [
    "pol√≠cia federal",
    "agente",
    "escriv√£o", 
    "papiloscopista",
    "delegado",
    "prova",
    "edital",
    "gabarito"
]

# Anos para busca (intervalo)
SEARCH_YEARS = range(2010, 2025)

# Tipos de arquivo para busca
FILE_TYPES = [".pdf", ".doc", ".docx"]

# Tamanho m√°ximo de arquivo para download (MB)
MAX_FILE_SIZE = 50
"""
    
    with open("config_scraper.py", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("  ‚úÖ Arquivo de configura√ß√£o criado: config_scraper.py")

def run_installation():
    """Executa o processo completo de instala√ß√£o"""
    print("üöÄ Iniciando configura√ß√£o do Archive.org PF Scraper...\n")
    
    # Verificar Python
    if not check_python_version():
        return False
    
    # Instalar depend√™ncias
    if not install_requirements():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias!")
        return False
    
    # Verificar instala√ß√£o
    if not verify_installation():
        print("\n‚ùå Falha na verifica√ß√£o da instala√ß√£o!")
        return False
    
    # Criar configura√ß√£o
    create_sample_config()
    
    print("\n‚úÖ Configura√ß√£o conclu√≠da com sucesso!")
    print("\nüìù Pr√≥ximos passos:")
    print("1. Execute: python archive_pf_scraper.py")
    print("2. Configure os par√¢metros conforme necess√°rio")
    print("3. Os arquivos ser√£o salvos no diret√≥rio especificado")
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("- Use com responsabilidade e respeite os termos de uso")
    print("- O script implementa rate limiting para evitar sobrecarga")
    print("- Verifique regularmente os logs para monitorar o progresso")
    
    return True

if __name__ == "__main__":
    success = run_installation()
    if not success:
        sys.exit(1)